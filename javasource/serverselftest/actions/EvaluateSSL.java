// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package serverselftest.actions;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import serverselftest.proxies.TestResult;

public class EvaluateSSL extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __SelfTestParam;
	private serverselftest.proxies.SelfTestResult SelfTestParam;

	public EvaluateSSL(IContext context, IMendixObject SelfTestParam)
	{
		super(context);
		this.__SelfTestParam = SelfTestParam;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.SelfTestParam = __SelfTestParam == null ? null : serverselftest.proxies.SelfTestResult.initialize(getContext(), __SelfTestParam);

		// BEGIN USER CODE
		
		String appURL = this.SelfTestParam.getApplicationURL();
		String statusMsg = "";
		
		if( appURL.startsWith("https://") ) {
			this.SelfTestParam.setHTTPSApplied(TestResult.Pass);
			
			SSLSocketFactory factory=(SSLSocketFactory) SSLSocketFactory.getDefault();
			SSLSocket sslsocket=(SSLSocket) factory.createSocket(appURL.substring(8),443);
			
			String protocol = sslsocket.getSession().getProtocol();
			this.SelfTestParam.setSSLType(protocol);
			
			String[] supportedProtocols = sslsocket.getEnabledProtocols();
			String log = "";
			for(String proto : supportedProtocols ) {
				log += proto + ", ";
			}
			Core.getLogger(this.toString()).info("Enabled Protocols: " + log);
			
			statusMsg = "";
		}
		else if( appURL.startsWith("http://") ) {
			this.SelfTestParam.setHTTPSApplied(TestResult.Fail);
			this.SelfTestParam.setSSLType("NONE");
			statusMsg = "Unencrypted connection";
		}
		else {
			this.SelfTestParam.setHTTPSApplied(TestResult.Fail);
			statusMsg = "Unknown protocol";
		}
		
		this.SelfTestParam.setHTTPSStatusDescription( statusMsg );
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "EvaluateSSL";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
